// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Emit
#pragma kernel SimulateDispatch
#pragma kernel Simulate
#pragma kernel DrawDispatch

#define GROUP_SIZE_X 128

#include "ParticleCluster.cginc"
#include "VortexMethod.cginc"
#include "SharedReduce.cginc"
#include "Grid.cginc"
#include "Command.cginc"

_GRID_DEF_UNIFORM(Heat);
Texture3D<float> uHeatTexture;
SamplerState sampler_uHeatTexture;

_VM_DEF_UNIFORM(VM);
_VM_DEF_FUNC(VM);

StructuredBuffer<TracerParticle> uEmits;
uint uEmitCount;

uint uFlip;
RWStructuredBuffer<TracerParticle> uParticles_RW;
StructuredBuffer<TracerParticle> uParticles;
RWStructuredBuffer<uint> uParticleCount_RW;
StructuredBuffer<uint> uParticleCount;
uint uMaxParticleCount;

RWStructuredBuffer<IndirectDispatchCmd> uSimulateCommand_RW;
RWStructuredBuffer<IndirectDrawCmd> uDrawCommand_RW;

float uDeltaTime;

StructuredBuffer<VortexParticle> uVortexParticles;
StructuredBuffer<uint> uVortexParticleCount;
uint uVortexFlip, uVortexMaxParticleCount;

[numthreads(GROUP_SIZE_X, 1, 1)]
void Emit(uint3 id : SV_DispatchThreadID) {
    uint emit_idx = id.x;
    if (emit_idx >= uEmitCount)
        return;
    PC_PUSH(SRC_SAFE, uEmits[emit_idx]);
}

[numthreads(1, 1, 1)]
void SimulateDispatch() {
    IndirectDispatchCmd cmd;
    cmd.x = (PC_COUNT(SRC) + GROUP_SIZE_X - 1) / GROUP_SIZE_X;
    cmd.y = cmd.z = 1;
    uSimulateCommand_RW[0] = cmd;
    PC_COUNT(REF_DST) = 0; 
}

float buoyancy_velocity_from_pos(in const float3 pos) {
    float3 uvw = _GRID_WORLD2UVW(Heat, pos);
    return uHeatTexture.SampleLevel(sampler_uHeatTexture, uvw, 0) * _VM_HEAT_BUOYANCY_FACTOR(VM);
}

SR_DEF_SHARED_BUFFER(PosVor, PosVor, GROUP_SIZE_X);

[numthreads(GROUP_SIZE_X, 1, 1)]
void Simulate(uint3 id : SV_DispatchThreadID, uint group_idx : SV_GroupIndex) {
    uint src_idx = id.x;
    TracerParticle p = PC_GET(SRC_SAFE, src_idx);
    p.life -= uDeltaTime;

    float3 v = float3(0, 0, 0);
    #define LOAD_POS_VOR(X) pos_vor_from_vortex_particle(uVortexParticles[X])
    #define REDUCE_POS_VOR(P) v += velocity_from_pos_vor(p.pos, P)
    uint s = _PC_IDX(Vortex, SRC, 0), t = s + _PC_COUNT(Vortex, SRC);
    SR_REDUCE(PosVor, PosVor, GROUP_SIZE_X, group_idx, s, t, LOAD_POS_VOR, REDUCE_POS_VOR);
    
    v.y += buoyancy_velocity_from_pos(p.pos);
    p.pos += v * uDeltaTime;

    /* if (p.pos.y <= 10)
        v.y += buoyancy_velocity_from_pos(p.pos);
    p.pos += v * uDeltaTime;
    if (p.pos.y > 10)
        p.pos.y = 10 - abs(v.y) * uDeltaTime; */

    if (src_idx < PC_COUNT(SRC) && p.life >= 0)
        PC_PUSH(DST_UNSAFE, p);
}

[numthreads(1, 1, 1)]
void DrawDispatch() {
    IndirectDrawCmd cmd;
    cmd.index_count_per_instance = PC_COUNT(SRC) * 6; // Times 6 for Triangle
    cmd.instance_count = 1;
    cmd.start_index = cmd.base_vertex = cmd.start_instance = 0;
    uDrawCommand_RW[0] = cmd;
}
