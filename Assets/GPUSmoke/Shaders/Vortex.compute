// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Emit
#pragma kernel SimulateDispatch
#pragma kernel Simulate

#define GROUP_SIZE_X 128

#include "ParticleCluster.cginc"
#include "VortexMethod.cginc"
#include "SharedReduce.cginc"

StructuredBuffer<VortexParticle> uEmits;
uint uEmitCount;

RWStructuredBuffer<VortexParticle> uParticles_RW;
StructuredBuffer<VortexParticle> uParticles;
RWStructuredBuffer<uint> uParticleCount_RW;
StructuredBuffer<uint> uParticleCount;
uint uMaxParticleCount;

RWStructuredBuffer<uint> uSimulateCommand_RW;

float uDeltaTime;

uint uFlip;

[numthreads(GROUP_SIZE_X, 1, 1)]
void Emit(uint3 id : SV_DispatchThreadID) {
    uint emit_idx = id.x;
    if (emit_idx >= uEmitCount)
        return;
    PC_PUSH(SRC_SAFE, uEmits[emit_idx]);
}

[numthreads(1, 1, 1)]
void SimulateDispatch() {
    uSimulateCommand_RW[0] = (PC_COUNT(SRC) + GROUP_SIZE_X - 1) / GROUP_SIZE_X;
    uSimulateCommand_RW[1] = 1;
    uSimulateCommand_RW[2] = 1;
    PC_COUNT(REF_DST) = 0; 
}

SR_DEF_SHARED_BUFFER(PosVor, PosVor, GROUP_SIZE_X);

[numthreads(GROUP_SIZE_X, 1, 1)]
void Simulate(uint3 id : SV_DispatchThreadID, uint group_idx : SV_GroupIndex) {
    uint src_idx = id.x, src_count = PC_COUNT(SRC);
    VortexParticle p = PC_GET(SRC_SAFE, src_idx);
    
    float3 v = float3(0, 0, 0);
    #define LOAD_POS_VOR(X) pos_vor_from_vortex_particle(uParticles[X])
    #define REDUCE_POS_VOR(P) v += velocity_from_pos_vor(p.pos, P)
    uint s = PC_IDX(SRC, 0), t = s + src_count;
    SR_REDUCE(PosVor, PosVor, GROUP_SIZE_X, group_idx, s, t, LOAD_POS_VOR, REDUCE_POS_VOR);

    p.pos += v * uDeltaTime;
    p.life -= uDeltaTime;

    if (src_idx < src_count && p.life >= 0)
        PC_PUSH(DST_UNSAFE, p);
}